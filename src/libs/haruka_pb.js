/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var proto = {};
var COMPILED = false;

goog.exportSymbol('proto.Lidar', null, global);
goog.exportSymbol('proto.SensorData', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Lidar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Lidar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Lidar.displayName = 'proto.Lidar';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Lidar.prototype.toObject = function(opt_includeInstance) {
  return proto.Lidar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Lidar} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Lidar.toObject = function(includeInstance, msg) {
  var f, obj = {
    dist: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Lidar}
 */
proto.Lidar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Lidar;
  return proto.Lidar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Lidar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Lidar}
 */
proto.Lidar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Lidar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Lidar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Lidar} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Lidar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDist();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float dist = 1;
 * @return {number}
 */
proto.Lidar.prototype.getDist = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Lidar.prototype.setDist = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SensorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SensorData.repeatedFields_, null);
};
goog.inherits(proto.SensorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SensorData.displayName = 'proto.SensorData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SensorData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SensorData.prototype.toObject = function(opt_includeInstance) {
  return proto.SensorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SensorData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SensorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    lidarsList: jspb.Message.toObjectList(msg.getLidarsList(),
    proto.Lidar.toObject, includeInstance),
    solarvoltage: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    solarcurrent: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    batteryvoltage: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    batterycurrent: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    motorcurrent: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    circuitcurrent: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    imupitch: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    imuroll: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    temperature: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    humidity: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    pressure: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    lat: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    lng: +jspb.Message.getFieldWithDefault(msg, 14, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SensorData}
 */
proto.SensorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SensorData;
  return proto.SensorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SensorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SensorData}
 */
proto.SensorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Lidar;
      reader.readMessage(value,proto.Lidar.deserializeBinaryFromReader);
      msg.addLidars(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSolarvoltage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSolarcurrent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBatteryvoltage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBatterycurrent(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMotorcurrent(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCircuitcurrent(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setImupitch(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setImuroll(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHumidity(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPressure(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLng(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SensorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SensorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SensorData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SensorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLidarsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Lidar.serializeBinaryToWriter
    );
  }
  f = message.getSolarvoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getSolarcurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getBatteryvoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getBatterycurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getMotorcurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getCircuitcurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getImupitch();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getImuroll();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getHumidity();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getPressure();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getLng();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
};


/**
 * repeated Lidar lidars = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Lidar>}
 */
proto.SensorData.prototype.getLidarsList = function() {
  return /** @type{!Array.<!proto.Lidar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Lidar, 1));
};


/** @param {!Array.<!proto.Lidar>} value */
proto.SensorData.prototype.setLidarsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Lidar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Lidar}
 */
proto.SensorData.prototype.addLidars = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Lidar, opt_index);
};


proto.SensorData.prototype.clearLidarsList = function() {
  this.setLidarsList([]);
};


/**
 * optional float solarVoltage = 2;
 * @return {number}
 */
proto.SensorData.prototype.getSolarvoltage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setSolarvoltage = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional float solarCurrent = 3;
 * @return {number}
 */
proto.SensorData.prototype.getSolarcurrent = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setSolarcurrent = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional float batteryVoltage = 4;
 * @return {number}
 */
proto.SensorData.prototype.getBatteryvoltage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setBatteryvoltage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float batteryCurrent = 5;
 * @return {number}
 */
proto.SensorData.prototype.getBatterycurrent = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setBatterycurrent = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float motorCurrent = 6;
 * @return {number}
 */
proto.SensorData.prototype.getMotorcurrent = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setMotorcurrent = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional float circuitCurrent = 7;
 * @return {number}
 */
proto.SensorData.prototype.getCircuitcurrent = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setCircuitcurrent = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional float imuPitch = 8;
 * @return {number}
 */
proto.SensorData.prototype.getImupitch = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setImupitch = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional float imuRoll = 9;
 * @return {number}
 */
proto.SensorData.prototype.getImuroll = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setImuroll = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional float temperature = 10;
 * @return {number}
 */
proto.SensorData.prototype.getTemperature = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setTemperature = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional float humidity = 11;
 * @return {number}
 */
proto.SensorData.prototype.getHumidity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setHumidity = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional float pressure = 12;
 * @return {number}
 */
proto.SensorData.prototype.getPressure = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setPressure = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional float lat = 13;
 * @return {number}
 */
proto.SensorData.prototype.getLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setLat = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional float lng = 14;
 * @return {number}
 */
proto.SensorData.prototype.getLng = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.SensorData.prototype.setLng = function(value) {
  jspb.Message.setField(this, 14, value);
};


goog.object.extend(exports, proto);
